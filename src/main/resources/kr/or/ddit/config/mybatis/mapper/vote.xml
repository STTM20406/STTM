<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="vote">

	<!-- **************** vote ******************** -->
	<insert id="insertVote" parameterType="voteVo">
		<selectKey order="BEFORE" resultType="Integer" keyProperty="vote_id">
			SELECT VOTE_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO VOTE
			(
				 VOTE_ID
				,PRJ_ID
				,VOTE_EMAIL
				,VOTE_START_DATE
				,VOTE_END_DATE
				,VOTE_SUBJECT
				,VOTE_CON
				,VOTE_ANO
				,VOTE_ST
				,VOTE_DEL_FL
			)
			VALUES
			(
				 #{vote_id}
				,#{prj_id}
				,#{vote_email}
				,SYSDATE
				,#{vote_end_date,jdbcType=DATE}
				,#{vote_subject}
				,#{vote_con}
				,#{vote_ano,jdbcType=VARCHAR}
				,'P'
				,'N'
			)
	</insert>
	
	<select id="voteList" parameterType="map" resultType="voteVo">
		<![CDATA[
		SELECT *
		FROM
		(
		SELECT A.*, ROWNUM RN
		FROM
		(SELECT  A.VOTE_ID
		     ,  A.PRJ_ID
		     ,  A.VOTE_EMAIL
		     ,  A.VOTE_START_DATE
		     ,  A.VOTE_END_DATE
		     ,  A.VOTE_SUBJECT
		     ,  A.VOTE_CON
		     ,  A.VOTE_ANO
		     ,  (CASE 
		     		WHEN A.VOTE_ST = 'Y' THEN 'Y'
		     		WHEN A.VOTE_END_DATE < SYSDATE THEN 'Y'
		     		ELSE 'P'
		     	END) VOTE_ST
		     ,  A.VOTE_DEL_FL
		     ,	B.USER_NM
		     ,  (SELECT COUNT(*) FROM VOTE_PART B WHERE A.VOTE_ID = B.VOTE_ID AND B.USER_EMAIL = #{user_email}) VOTE_FL
		     ,  (SELECT COUNT(*) FROM VOTE_PART B WHERE A.VOTE_ID = B.VOTE_ID) PART
     		 ,  (SELECT COUNT(*) FROM PROJECT_MEM C WHERE PRJ_ID = A.PRJ_ID) MAX
		FROM    VOTE A, USERS B
		WHERE	A.PRJ_ID = #{prj_id}
		AND		A.VOTE_EMAIL = B.USER_EMAIL
		AND		A.VOTE_DEL_FL = 'N'
		ORDER BY VOTE_ID DESC) A ) A
		WHERE RN >= ((#{page} - 1) * #{pageSize}) + 1 AND RN <= (#{page} * #{pageSize})
		]]>
	</select>
	
	<select id="getVote" parameterType="Integer" resultType="voteVo">
		SELECT	A.VOTE_ID
		     ,  A.PRJ_ID
		     ,  A.VOTE_EMAIL
		     ,  A.VOTE_START_DATE
		     ,  A.VOTE_END_DATE
		     ,  A.VOTE_SUBJECT
		     ,  A.VOTE_CON
		     ,  A.VOTE_ANO
		     ,  (CASE 
		     		WHEN A.VOTE_ST = 'Y' THEN 'Y'
		     		WHEN A.VOTE_END_DATE &lt; SYSDATE THEN 'Y'
		     		ELSE 'P'
		     	END) VOTE_ST
		     ,  A.VOTE_DEL_FL
		FROM	VOTE A
		WHERE	A.VOTE_ID = #{vote_id}
	</select>
	
	<update id="deleteVote" parameterType="Integer">
		UPDATE	VOTE
		SET		VOTE_DEL_FL = 'Y'
		WHERE	VOTE_ID = #{vote_id}
	</update>
	
	<select id='getVoteCnt' resultType="Integer" parameterType="Integer">
		SELECT	COUNT(*)
		FROM	VOTE
		WHERE	VOTE_DEL_FL = 'N'
		AND		PRJ_ID = #{prj_id}
	</select>
	
	<update id="updateVote" parameterType="voteVo">
		UPDATE	VOTE
		SET		
				VOTE_END_DATE = #{vote_end_date,jdbcType=DATE},
				VOTE_SUBJECT = #{vote_subject},
				VOTE_CON = #{vote_con,jdbcType=VARCHAR},
				VOTE_ANO = #{vote_ano,jdbcType=VARCHAR},
				VOTE_ST = #{vote_st}
		WHERE	VOTE_ID = #{vote_id}
	</update>
	
	<update id="cmpVote" parameterType="Integer">
		UPDATE	VOTE
		SET		VOTE_ST = 'Y'
		WHERE	VOTE_ID = #{vote_id}
	</update>
	<!-- **************** vote_item ******************** -->
	<insert id="insertVoteItem" parameterType="vote_itemVo">
		MERGE INTO VOTE_ITEM
		USING DUAL ON 
		(
			VOTE_ITEM_ID IS NOT NULL AND
			VOTE_ITEM_ID = #{vote_item_id, jdbcType=INTEGER} AND
			VOTE_ID = #{vote_id}
		)
		WHEN MATCHED THEN
			UPDATE SET		
				VOTE_ITEM_CON = #{vote_item_con}
		WHEN NOT MATCHED THEN
		INSERT 
		(
			VOTE_ITEM_ID
			,VOTE_ID
			,VOTE_ITEM_CON
		) 
		VALUES
		(
			VOTE_IT_SEQ.NEXTVAL
			,#{vote_id}
			,#{vote_item_con}
		)
	</insert>
	<select id="itemList" parameterType="Integer" resultType="vote_itemVo">
		SELECT	*
		FROM	VOTE_ITEM
		WHERE	VOTE_ID = #{vote_id,jdbcType=INTEGER}
		ORDER BY VOTE_ITEM_ID
	</select>
	
	<delete id="deleteVoteItem" parameterType="Integer">
		DELETE	FROM VOTE_ITEM
		WHERE	VOTE_ITEM_ID IN 
		<foreach collection="del_item_id" item="item_id" open="(" close=")" separator=",">
					#{item_id}
		</foreach>
	</delete>
	<!-- **************** vote_part ******************** -->
	<insert id="insertVotePart" parameterType="vote_partVo">
		MERGE INTO VOTE_PART
		USING DUAL ON
			(
				VOTE_ID = #{vote_id} AND
				USER_EMAIL = #{user_email}
			)
		WHEN MATCHED THEN
			UPDATE SET
				VOTE_ITEM_ID = #{vote_item_id}
		WHEN NOT MATCHED THEN
		INSERT 
		(
			PRJ_ID
			,USER_EMAIL
			,VOTE_ID
			,VOTE_ITEM_ID
		)
		VALUES
		(
			#{prj_id}
			,#{user_email}
			,#{vote_id}
			,#{vote_item_id}
		)
	</insert>
	<select id="partList" parameterType="Integer" resultType="vote_partVo">
		SELECT	USER_EMAIL, VOTE_ID, VOTE_ITEM_ID
		FROM	VOTE_PART
		WHERE	VOTE_ID = #{vote_id}
	</select>
	
	<select id="checkVote" parameterType="map" resultType="vote_partVo">
		SELECT	*
		FROM	VOTE_PART
		WHERE	VOTE_ID = #{vote_id}
		AND		USER_EMAIL = #{user_email}
	</select>
	
	<delete id="deletePart" parameterType="Integer">
		DELETE	FROM VOTE_PART
		WHERE	VOTE_ITEM_ID IN 
		<foreach collection="del_item_list" item="item_id" open="(" close=")" separator=",">
					#{item_id}
		</foreach>
	</delete>
</mapper>