<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project">

	<!-- **********************project*********************** -->
	<!-- 내가 속한 프로젝트 리스트 조회 -->
	<select id="projectList" parameterType="string" resultType="projectVo">
		SELECT * FROM (SELECT * FROM PROJECT)A INNER JOIN
					  				(SELECT * FROM PROJECT_MEM)B ON
		A.PRJ_ID = B.PRJ_ID AND B.USER_EMAIL = #{user_email} AND A.DEL_FL = 'N' AND B.PRJ_MEM_DEL_FL = 'N' ORDER BY PRJ_UPDATE DESC
	</select>

	<!--프로젝트 아이디에 맞는 프로젝트 정보 조회 -->
	<select id="getProject" parameterType="int" resultType="projectVo">
		SELECT * FROM PROJECT WHERE PRJ_ID = #{prj_id}
	</select>
	
	<select id="getPrjByWrk" parameterType="int" resultType="projectVo">
		SELECT	C.*
		FROM	WORK A, WORK_LIST B, PROJECT C
		WHERE	A.WRK_ID = #{wrk_id}
		AND		A.WRK_LST_ID = B.WRK_LST_ID
		AND		B.PRJ_ID = C.PRJ_ID
	</select>
	
	<!-- 프로젝트 상태에 따라 프로젝트 리스트 조회 -->
	<select id="projectStatusList" parameterType="map" resultType="projectVo">
		SELECT A.PRJ_ID
			 , A.PRJ_NM
			 , A.PRJ_EXP
			 , A.PRJ_AUTH
			 , A.PRJ_START_DT 
			 , A.PRJ_END_DT
			 , A.PRJ_CMP_DT
			 , A.PRJ_ST
			 , A.DEL_FL
			 , B.USER_EMAIL
		FROM ( SELECT A.* FROM (SELECT * FROM PROJECT WHERE PRJ_ST = #{prj_st}) A) A, PROJECT_MEM B
		WHERE  A.PRJ_ID = B.PRJ_ID AND B.USER_EMAIL = #{user_email} AND A.DEL_FL = 'N' AND B.PRJ_MEM_DEL_FL = 'N' 
	</select>
	
	
	<!-- 프로젝트 검색 (내가 포함된 프로젝트 중에서) -->
	<select id="projectSearch" parameterType="map" resultType="projectVo">
		SELECT A.PRJ_ID
			 , A.PRJ_NM
			 , A.PRJ_EXP
			 , A.PRJ_AUTH
			 , A.PRJ_START_DT
			 , A.PRJ_END_DT
			 , A.PRJ_CMP_DT
			 , A.PRJ_ST
			 , A.DEL_FL
			 , B.USER_EMAIL
		FROM ( SELECT A.* FROM (SELECT * FROM PROJECT WHERE LOWER(PRJ_NM) LIKE '%'||#{prj_nm}||'%') A) A, PROJECT_MEM B
		WHERE  A.PRJ_ID = B.PRJ_ID AND B.USER_EMAIL = #{user_email} AND A.DEL_FL = 'N' AND B.PRJ_MEM_DEL_FL = 'N'
	</select>


	<!-- 프로젝트 생성 (프로젝트가 생성되는 동시에 프로젝트 멤버에 프로젝트를 생성한 사람 이메일 insert) -->
	<insert id="insertProject" parameterType="projectVo">
		<selectKey resultType="Integer" keyProperty="prj_id" order="BEFORE">
			SELECT PRJ_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO PROJECT (PRJ_ID, PRJ_NM, PRJ_EXP, PRJ_AUTH, PRJ_ST, PRJ_UPDATE, DEL_FL)
		VALUES (#{prj_id}, #{prj_nm}, #{prj_exp}, #{prj_auth}, #{prj_st}, SYSDATE, 'N')
	</insert>
	

	<!-- 프로젝트 상태 업데이트 -->
	<update id="updateProject" parameterType="projectVo">
		UPDATE  PROJECT 
		SET 	PRJ_ST = #{prj_st}
		WHERE   PRJ_ID = #{prj_id}
	</update>
	
	
	<!-- 프로젝트 전체 업데이트 -->
	<update id="updateAllProject" parameterType="projectVo">
		UPDATE PROJECT A SET
					 <if test="prj_nm != null">
					 A.PRJ_NM = #{prj_nm}
					 </if>
                     <if test="prj_exp != null">
					 , A.PRJ_EXP = #{prj_exp}
					 </if>
                     , A.PRJ_AUTH = #{prj_auth}
					 , A.PRJ_START_DT = #{prj_start_dt, jdbcType=DATE}
					 , A.PRJ_END_DT = #{prj_end_dt, jdbcType=DATE}
					 , A.PRJ_CMP_DT = #{prj_cmp_dt, jdbcType=DATE}
                     , A.PRJ_ST = #{prj_st}
                     , A.PRJ_UPDATE = SYSDATE
                     , A.DEL_FL = 'N'
		WHERE A.PRJ_ID = #{prj_id}
	</update>


	<!-- 프로젝트 삭제(프로젝트 삭제여부 업데이트) -->
	<update id="deleteProject" parameterType="projectVo">
		UPDATE PROJECT SET DEL_FL = 'Y' WHERE PRJ_ID = #{prj_id}
	</update>

	<!-- 프로젝트 아이디 MAX값 -->
	<select id="maxProjectId" resultType="int">
		select max(prj_id) from project
	</select>
	
	<!-- !!!!!!!!!!1  검색 집합  !!!!!!!!1! -->
	<!-- 업무리스트명으로 프로젝트 검색 -->
	<select id="searchWorkList" parameterType="map" resultType="projectVo">
	
		select distinct(p.prj_id), p.prj_nm, p.prj_exp, p.prj_auth,p.prj_start_dt,
				p.prj_end_dt, p.prj_cmp_dt, p.prj_st, p.prj_update, p.del_fl
		from work_list w, project p
		where p.prj_id in(
		    select p.prj_id
		    from project p, project_mem m
		    where p.prj_id = m.prj_id
             and m.prj_mem_del_fl = 'N'
		    and p.del_fl = 'N'
		    and m.user_email = #{user_email})
		and w.prj_id = p.prj_id
		and w.del_fl = 'N'
		and wrk_lst_nm like '%' || #{wrk_lst_nm} || '%'
		order by p.prj_id desc
	</select>
	
	<!-- 업무명으로 프로젝트 검색-->
	<select id="searchWorkNm" parameterType="workVo" resultType="projectVo">
		select p.*
		from project p, project_mem m
		where p.prj_id = m.prj_id
		and p.del_fl='N'
		and m.prj_mem_del_fl = 'N'
		and m.user_email = #{user_email}
		and m.prj_id in(
		    select distinct(wl.prj_id)
		    from work w, work_list wl
		    where w.wrk_lst_id = wl.wrk_lst_id
		    and w.wrk_del_fl = 'N'
		    and wrk_nm like '%' || #{wrk_nm} || '%')
		order by p.prj_id desc    
	</select>
	
	<!-- 프로젝트 멤버명으로 프로젝트 검색 -->
	<select id="searchProjectMem" parameterType="userVo" resultType="projectVo">
		select *
		from project p, project_mem m
		where p.prj_id = m.prj_id
		and m.user_email = #{user_email}
		and p.del_fl = 'N'
		and m.prj_mem_del_fl = 'N'
		and p.prj_id in
		    (select p.prj_id
		    from project p, project_mem m
		    where p.prj_id = m.prj_id
		    and p.del_fl='N'
		    and m.prj_mem_del_fl = 'N'
		    and m.user_email in   
		        (select user_email
		        from users
		        where user_nm like '%' || #{user_nm} || '%'))
		order by p.prj_id desc	        
	</select>

	<!-- *********************project_mem******************** -->

	<!-- 관리자/멤버로 추가 할 프로젝트 멤버 리스트 조회 -->
	<select id="projectMemList" resultType="project_memVo" parameterType="project_memVo">
		SELECT DISTINCT B.PRJ_ID
					  , B.USER_EMAIL
					  , B.PRJ_MEM_LV
					  , B.PRJ_MEM_NIK
					  , B.PRJ_OWN_FL
					  , C.USER_NM FROM
					  ( SELECT * FROM PROJECT_MEM WHERE USER_EMAIL = #{user_email}) A, PROJECT_MEM B, USERS C
		WHERE B.PRJ_ID IN (A.PRJ_ID)
		AND C.USER_EMAIL = B.USER_EMAIL AND B.PRJ_ID = #{prj_id} AND B.PRJ_MEM_DEL_FL = 'N'
	</select>
	
	<!-- 프로젝트 멤버 조건없이 조회  -->
	<select id="projectMemYNList" resultType="project_memVo" parameterType="project_memVo">
		SELECT DISTINCT B.PRJ_ID
					  , B.USER_EMAIL
					  , B.PRJ_MEM_LV
					  , B.PRJ_MEM_NIK
					  , B.PRJ_OWN_FL
					  , C.USER_NM FROM
					  ( SELECT * FROM PROJECT_MEM WHERE USER_EMAIL = #{user_email}) A, PROJECT_MEM B, USERS C
		WHERE B.PRJ_ID IN (A.PRJ_ID)
		AND C.USER_EMAIL = B.USER_EMAIL AND B.PRJ_ID = #{prj_id}
	</select>
	
	<!-- 프로젝트 멤버로 추가 할 프로젝트 멤버 리스트 조회 -->
	<select id="projectAllMemList" resultType="project_memVo" parameterType="string">
		SELECT DISTINCT B.USER_EMAIL
              , C.USER_NM FROM
              ( SELECT * FROM PROJECT_MEM WHERE USER_EMAIL = #{user_email}) A, PROJECT_MEM B, USERS C
		WHERE B.PRJ_ID IN (A.PRJ_ID)
		AND C.USER_EMAIL = B.USER_EMAIL AND B.PRJ_MEM_DEL_FL = 'N'
	</select>
	
	<!-- 현재 접속한 사용자의 아이디로 프로젝트 멤버 정보 가져오기  -->
	<select id="getProjectMemInfo" resultType="project_memVo" parameterType="project_memVo">
		SELECT DISTINCT A.PRJ_ID
			              	     , A.USER_EMAIL
			              	     , A.PRJ_MEM_LV
			              	     , A.PRJ_MEM_NIK
			              	     , A.PRJ_OWN_FL
			              	     , B.USER_NM 
		FROM          	    ( SELECT * FROM PROJECT_MEM WHERE USER_EMAIL = #{user_email}) A, USERS B
		WHERE           	      A.USER_EMAIL = B.USER_EMAIL AND A.PRJ_ID = #{prj_id}
	</select>
	
	<!-- 프로젝트 생성시 멤버 테이블에 동시에 인서트 / 프로젝트 멤버 추가할 때 -->
	<insert id="insertProjectMem" parameterType="project_memVo">
		INSERT INTO
		PROJECT_MEM (PRJ_ID, USER_EMAIL, PRJ_MEM_LV, PRJ_OWN_FL, PRJ_MEM_DEL_FL)
		VALUES (#{prj_id}, #{user_email}, #{prj_mem_lv}, #{prj_own_fl}, 'N')
	</insert>
	
	<!-- 프로젝트 멤버 관리자로 추가시 lv0으로 값 업데이트 / 프로젝트 관리자 삭제시 lv1로 값 업데이트 -->
	<update id="updateProjectMem" parameterType="project_memVo">
		UPDATE PROJECT_MEM A SET PRJ_MEM_LV = #{prj_mem_lv}, PRJ_MEM_DEL_FL = 'N' WHERE PRJ_ID = #{prj_id} AND USER_EMAIL = #{user_email}
	</update>
	
	<!-- PROJECT_MEM 테이블에 아예 데이터가 없거나, 있지만 DEL_FL이 Y인 회원 프로젝트 멤버(LV1, N)로 추가시 -->
	<insert id="mergeProjectMem" parameterType="project_memVo">
		MERGE INTO PROJECT_MEM
		USING DUAL ON
	    (
	        PRJ_ID = #{prj_id}
	        AND USER_EMAIL = #{user_email}
	    )
	    WHEN MATCHED THEN
	        UPDATE SET
	            PRJ_MEM_DEL_FL = 'N'
	    WHEN NOT MATCHED THEN
	        INSERT
	            (
	                PRJ_ID
	                ,USER_EMAIL
	                ,PRJ_MEM_LV
	                ,PRJ_OWN_FL
	                ,PRJ_MEM_DEL_FL
	            )
	        VALUES
	            (
	                #{prj_id}
	                ,#{user_email}
	                ,'LV1'
	                ,'N'
	                ,'N'
	            )
	</insert>
	<!-- 프로젝트 멤버 삭제할 때 -->
	<update id="deleteProjectMem" parameterType="project_memVo">
		UPDATE PROJECT_MEM SET PRJ_MEM_DEL_FL = 'Y' WHERE PRJ_ID = #{prj_id} AND USER_EMAIL = #{user_email} AND PRJ_MEM_LV = #{prj_mem_lv}
	</update>
	
	<!-- 휴면 계정으로 전환하기 위하여 나와 프로젝트 아이디가 같은 멤버 조회 -->
	<select id="getMyProjectMemList" parameterType="string" resultType="project_memVo">
		select distinct b.user_email
             	, c.user_nm from
            	(select * 
				 from project_mem 
				 where user_email = #{user_email}) a, project_mem b, users c
		 where b.prj_id in (a.prj_id)
		 and c.user_email = b.user_email
	</select>

	<!-- 사용자가 멤버 탭에서 자신과 같은 프로젝트를 진행하는 멤버의 리스트를 페이징으로 조회 -->
	<select id="projectMemPagingList" parameterType="map" resultType="project_memVo">
		<![CDATA[
		select * from
			(select a.*, rownum rn
		     from
				(select distinct b.user_email
	             			   , c.user_nm from
	            	(select * 
					 from project_mem 
					 where user_email = #{user_email}
					 and prj_mem_del_fl not in 'Y') a, project_mem b, users c
			 where b.prj_id in (a.prj_id)
			 and c.user_email = b.user_email) a )
		where rn >= (#{page}-1)*#{pageSize} + 1 and rn <= #{page}*#{pageSize}
		]]>
	</select>
	
	<!-- 프로젝트 멤버 전체수 조회 -->
	<select id="projectMemCnt" parameterType="map" resultType="int">
		select count(*)
     	from
        (select distinct b.user_email
                       , c.user_nm from
            (select * 
             from project_mem 
             where user_email = #{user_email}
             and prj_mem_del_fl not in 'Y') a, project_mem b, users c
	     where b.prj_id in (a.prj_id)
	     and c.user_email = b.user_email) a 
	</select>
	
	
	<!-- 헤더에 화상회의 친구목록 리스트 -->
	<select id="headerChatFriendList" parameterType="string" resultType="project_memVo">
		select m.prj_id, u.user_nm
		from project_mem m, users u, project p
		where m.user_email = u.user_email
		and p.prj_id = m.prj_id
		and m.prj_id in
		            (select prj_id
		            from project_mem m
		            where m.user_email in #{user_email})
		and p.del_fl = 'N'            
		order by m.prj_id, u.user_nm
	</select>
	
	<!-- 휴면 계정을 하기 위해 session에서 가져온 user_email에서 나의 프로젝트 멤버를 리스트로 조회 -->	
	<select id="prjMemListForInactive" parameterType="map" resultType="project_memVo">
		<![CDATA[
			SELECT *
				FROM
			(SELECT E.*, ROWNUM RN
			FROM
			(SELECT DISTINCT 
			                D.PRJ_ID
			              , D.PRJ_NM  
			              , B.USER_EMAIL
			              , C.USER_NM 
			              , B.PRJ_MEM_LV 
			              , B.PRJ_OWN_FL
			FROM( SELECT * 
			      FROM PROJECT_MEM 
			      WHERE USER_EMAIL = #{user_email}
			      AND PRJ_OWN_FL = 'Y') A, PROJECT_MEM B, USERS C, PROJECT D
			WHERE B.PRJ_ID IN (A.PRJ_ID) 
			AND B.USER_EMAIL = C.USER_EMAIL 
			AND B.PRJ_ID = D.PRJ_ID
			AND B.PRJ_OWN_FL = 'N' 
			ORDER BY D.PRJ_ID) e)
			where rn >=(#{page}-1)*#{pageSize} + 1 and rn <=#{page}*#{pageSize}
		]]>
	</select>

	<!-- 휴면 계정을 하기 위해 session에서 가져온 user_email에서 나의 프로젝트 멤버를 리스트로 조회한 갯수 -->
	<select id="prjMemListForInactiveCnt" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM
		(SELECT DISTINCT 
                D.PRJ_ID
              , D.PRJ_NM  
              , B.USER_EMAIL
              , C.USER_NM 
              , B.PRJ_MEM_LV 
              , B.PRJ_OWN_FL
		FROM( SELECT * 
		      FROM PROJECT_MEM 
		      WHERE USER_EMAIL = #{user_email}
		      AND PRJ_OWN_FL = 'Y') A, PROJECT_MEM B, USERS C, PROJECT D
		WHERE B.PRJ_ID IN (A.PRJ_ID) 
		AND B.USER_EMAIL = C.USER_EMAIL 
		AND B.PRJ_ID = D.PRJ_ID
		AND B.PRJ_OWN_FL = 'N' 
		ORDER BY D.PRJ_ID) E
	</select>
	
	<!-- 휴면 계정 설정하기 위해 프로젝트 소유자의 멤버 레벨(String prj_mem_lv)를 'LV0'으로 업데이트 시키고
	 	  프로젝트 소유 유무(String prj_own_fl)를 'N'로 업데이트 시켜 준다.  -->
	<update id="updateInactiveMember" parameterType="project_memVo">
		UPDATE PROJECT_MEM
		SET PRJ_MEM_LV = 'LV2', PRJ_OWN_FL = 'N'
		WHERE USER_EMAIL = #{user_email}
		AND PRJ_ID = #{prj_id}
	</update>
	
	<!-- 휴면 계정 설정하기 위해 프로젝트 소유자를 넘겨줄 자의 멤버 레벨(String prj_mem_lv)를 'LV1'으로 업데이트 시키고
	 	  프로젝트 소유 유무(String prj_own_fl)를 'Y'로 업데이트 시켜 준다.  -->
	<update id="updateTransferOwnership" parameterType="project_memVo">
		UPDATE PROJECT_MEM
		SET PRJ_MEM_LV = 'LV0', PRJ_OWN_FL = 'Y'
		WHERE USER_EMAIL = #{user_email}
		AND PRJ_ID = #{prj_id}
	</update>
	
	<!-- 멤버탭에서 프로젝트 이름을 클릭하여 프로젝트 번호를 받아오고
		  프로젝트 번호로 나의 프로젝트 멤버를 조회하여 페이징 리스트로 보여준다 -->
	<select id="projectMemListById" parameterType="map" resultType="project_memVo">
		<![CDATA[
			select *
				from
					(select a.*, rownum rn
						 from
							(select *
			                 from project_mem
			                 where prj_id = #{prj_id}
			                 and user_email not in #{user_email}) a )
			where rn >=(#{page}-1)*#{pageSize} + 1 and rn <=#{page}*#{pageSize}
		]]>
	</select>
	
	<!-- 멤버탭에서 프로젝트 이름을 클릭하여 프로젝트 번호를 받아오고
		  프로젝트 번호로 나의 프로젝트 멤버를 조회하여 페이징 리스트 갯수 -->
	<select id="projectMemListByIdCnt" parameterType="map" resultType="int">
		<![CDATA[
			select count(*)
			     from
			(select *
				from
					(select a.*, rownum rn
						 from
							(select *
			                 from project_mem
			                 where prj_id = #{prj_id}
			                 and user_email not in #{user_email}) a )
			where rn >=(#{page}-1)*#{pageSize} + 1 and rn <=#{page}*#{pageSize}) b
		]]>
	</select>
	
	<select id="searchName" parameterType="project_memVo" resultType="project_memVo">
		SELECT DISTINCT B.USER_EMAIL
              , C.USER_NM FROM
              ( SELECT * FROM PROJECT_MEM WHERE USER_EMAIL = #{user_email}) A, PROJECT_MEM B, USERS C
		WHERE B.PRJ_ID IN (A.PRJ_ID)
		AND C.USER_EMAIL = B.USER_EMAIL AND B.PRJ_MEM_DEL_FL = 'N' AND C.USER_NM LIKE '%'||#{user_nm}||'%'
	</select>
	
	<select id="searchPL" parameterType="project_memVo" resultType="project_memVo">
		SELECT DISTINCT B.PRJ_ID
					  , B.USER_EMAIL
					  , B.PRJ_MEM_LV
					  , B.PRJ_MEM_NIK
					  , B.PRJ_OWN_FL
					  , C.USER_NM FROM
					  ( SELECT * FROM PROJECT_MEM WHERE USER_EMAIL = #{user_email}) A, PROJECT_MEM B, USERS C
		WHERE B.PRJ_ID IN (A.PRJ_ID)
		AND C.USER_EMAIL = B.USER_EMAIL AND B.PRJ_ID = #{prj_id} AND B.PRJ_MEM_DEL_FL = 'N' AND C.USER_NM LIKE '%'||#{user_nm}||'%'
	</select>
	
	<!-- 휴면 계정으로 전환 하기 위하여 prj_own_fl = 'Y' 인 리스트를 가져온다
		  리스트가 null이면 휴면계정 버튼이 보이고 휴면 계정 전환 할수 있다 -->
	<select id="getprjListForInactive" parameterType="string" resultType="project_memVo">
		select * from project_mem
		where prj_own_fl = 'Y'
		and user_email = #{user_email}
	</select>
	
	<!-- 프로젝트 멤버 리스트에서 친구가 아닌 사람만 친구 요청 버튼 생기도록 리스트를 가져옴 -->
	<select id="getFriendsBtn" parameterType="int" resultType="project_memVo">
		select distinct 
		                a.prj_id 
		               ,d.user_email
		               ,d.user_nm
		from
		(select * 
		from project_mem
		where prj_id = #{prj_id}) a, project_mem b, friends c, users d
		where a.prj_id = b.prj_id
		and b.user_email = c.frd_email
		and b.user_email = d.user_email
	</select>
	
	<!-- *******************project_trnf_hs****************** -->


	<!-- *********************file_attch********************* -->
	
	<!-- file 등록 -->
	<insert id="insertFilePublic" parameterType="file_attchVo">
		insert into 
			FILE_ATTCH 
		values(
			FILE_SEQ.nextVal,
			#{prj_id},
			#{user_email},
			#{wrk_id},
			#{original_file_nm},
			#{db_file_nm},
			#{file_size},
			#{file_exts},
			sysdate,
			'Y',
			'N',
			'N'
			)
	</insert>
	
	<insert id="insertFileindividual" parameterType="file_attchVo">
		insert into 
			FILE_ATTCH 
		values(
			FILE_SEQ.nextVal,
			#{prj_id},
			#{user_email},
			#{wrk_id},
			#{original_file_nm},
			#{db_file_nm},
			#{file_size},
			#{file_exts},
			sysdate,
			'N',
			'N',
			'Y'
			)
	</insert>
	
	<insert id="insertFileboth" parameterType="file_attchVo">
		insert into 
			FILE_ATTCH 
		values(
			FILE_SEQ.nextVal,
			#{prj_id},
			#{user_email},
			#{wrk_id},
			#{original_file_nm},
			#{db_file_nm},
			#{file_size},
			#{file_exts},
			sysdate,
			'Y',
			'N',
			'Y'
			)
	</insert>
	
	<!-- file 등록 -->
	
	
	<!-- public filePagination 공용 파일 링크 보관함!!!! -->
	<select id="publicFilePagination" parameterType="map" resultType="file_attchVo">
		<![CDATA[
			select 
	            rn, a.file_id, a.prj_id, a.user_email, a.wrk_id, a.original_file_nm, a.db_file_nm, a.file_size, a.file_exts, a.file_dt, a.del_fl, a.FILE_SAVE_FL,a.FILE_COMM_FL, b.wrk_nm, C.USER_NM
	        from
	            (select a.*, ROW_NUMBER() OVER(order by file_id desc) rn
	        from
			(select * 
			from file_attch
			WHERE prj_id = #{prj_id}
			and del_fl='N'
			and file_save_fl ='Y') a)a, work b, USERS C
			where rn >=(#{page}-1)*#{pageSize}+1 and rn <= #{page}*#{pageSize}
			and b.wrk_id = a.wrk_id
			AND A.USER_EMAIL = C.USER_EMAIL
			order by file_id desc
		]]>
	</select>

	<!-- 해당 프로젝트의 전체 파일수 조회 -->
	<select id="fileCnt" resultType="int">
		select count(*)
		from
			file_attch
		WHERE 
			prj_id = #{prj_id}
        and 
        	del_fl='N'
        and 
        	file_save_fl ='Y'
	</select>
	
	<!-- linkList Pagination -->
	<select id="publicLinkPagination" parameterType="map" resultType="link_attchVo">
   <![CDATA[
      select 
      	rn, a.link_id, a.prj_id, a.user_email, a.wrk_id, a.attch_url, a.file_link_dt, a.del_fl, b.wrk_nm, c.user_nm
      from
      	(select a.*, ROW_NUMBER() OVER( order by link_id desc) rn
      from
      (select * 
      from link_attch
      WHERE prj_id = #{prj_id}
      and del_fl = 'N') a)a, work b, USERS c
      where rn >=(#{page}-1)*#{pageSize}+1 and rn <= #{page}*#{pageSize}
      and b.wrk_id = a.wrk_id
      and a.user_email = c.user_email
      order by link_id desc
   ]]>
	</select>

	<!-- 해당 프로젝트의 전체 파일수 조회 -->
	<select id="linkCnt" resultType="int">
		select count(*)
		from
		link_attch
		where
		PRJ_ID=#{PRJ_ID}
		and
		del_fl='N'
	</select>
	
	<!-- file, link 상태값 Y로 변경 (삭제 처리) -->
	
	<update id="updateFile" parameterType="int">
		update file_attch
		set
		del_fl ='Y'
		where
		file_id =#{file_id}
	</update>
	
	<update id="updateLink" parameterType="int">
		update link_attch
		set
		del_fl='Y'
		where
		link_id = #{link_id}
	</update>
	
	<!-- public filePagination -->
	
	<insert id="insertFile" parameterType="file_attchVo">
		insert into FILE_ATTCH
		values(
		FILE_SEQ.nextVal,
		#{prj_id},
		#{user_email},
		#{wrk_id},
		#{original_file_nm},
		#{db_file_nm},
		#{file_size},
		#{file_exts},
		sysdate,
		'PU',
		'N')
	</insert>
	
	<!--개인보관함 -->
	<insert id="insertFileIN" parameterType="file_attchVo">
		insert into FILE_ATTCH
		values(
		FILE_SEQ.nextVal,
		#{prj_id},
		#{user_email},
		#{wrk_id},
		#{original_file_nm},
		#{db_file_nm},
		#{file_size},
		#{file_exts},
		sysdate,
		'IN',
		'N')
	</insert>
	
	<!--개인보관함 -->
	
	<select id="getFile" parameterType="int"
		resultType="file_attchVo">
		select * from FILE_ATTCH
		where FILE_ID = #{file_id}
	</select>
	
	<select id="individualPagination" parameterType="map" resultType="file_attchVo">
	   <![CDATA[
		    select 
		    rn, a.file_id, a.prj_id, a.user_email, a.wrk_id, a.original_file_nm, a.db_file_nm, a.file_size, a.file_exts, a.file_dt, a.del_fl, a.FILE_SAVE_FL,a.FILE_COMM_FL, b.wrk_nm, C.USER_NM
		    from
		    (select a.*, ROW_NUMBER() OVER(order by a.file_id desc) rn
		    from
		    (select * 
		    from file_attch
		    WHERE del_fl='N'
		    and FILE_COMM_FL ='Y' and USER_EMAIL = #{user_email}) a)a, work b, USERS C
		    where rn>=(#{page}-1)*#{pageSize} + 1 and rn <=#{page}*#{pageSize}
		    and b.wrk_id = a.wrk_id
		    AND A.USER_EMAIL = C.USER_EMAIL order by a.file_id desc
	   ]]>
	</select>
	
	<select id="individualSearchPagination" parameterType="map" resultType="file_attchVo">
	   <![CDATA[
	    	select 
		    rn, a.file_id, a.prj_id, a.user_email, a.wrk_id, a.original_file_nm, a.db_file_nm, a.file_size, a.file_exts, a.file_dt, a.del_fl, a.FILE_SAVE_FL,a.FILE_COMM_FL, b.wrk_nm, C.USER_NM
		    from
		    (select a.*, ROW_NUMBER() OVER(order by a.file_id desc) rn
		    from
		    (select * 
		    from file_attch
		    WHERE original_file_nm like '%'||#{original_file_nm}||'%'
		    and del_fl='N'
		    and FILE_COMM_FL ='Y'
		    order by file_id desc) a)a, work b, USERS C
		    where rn>=(#{page}-1)*#{pageSize} + 1 and rn <=#{page}*#{pageSize}
		    and b.wrk_id = a.wrk_id
		    AND A.USER_EMAIL = C.USER_EMAIL
		   order by a.file_id desc
	   ]]>
	</select>
	
	<select id="individualCnt" parameterType="String" resultType="int">
		select count(*)
	    from
	    (select a.*, rownum rn 
	    from
	    (select * 
	    from file_attch
	    WHERE del_fl='N'
	    and FILE_COMM_FL ='Y'
	    order by file_id desc) a)a, work b, USERS C
	    where b.wrk_id = a.wrk_id
	    AND A.USER_EMAIL = C.USER_EMAIL
	    and c.USER_EMAIL = #{USER_EMAIL}
	</select>
	
	<select id="searchIndividualCnt" parameterType="String" resultType="int">
		select count(*)
	    from
	    (select a.*, rownum rn 
	    from
	    (select * 
	    from file_attch
	    WHERE original_file_nm like '%'||#{original_file_nm}||'%'
	    and del_fl='N'
	    and FILE_COMM_FL ='Y'
	    order by file_id desc) a)a, work b, USERS C
	    where b.wrk_id = a.wrk_id
	    AND A.USER_EMAIL = C.USER_EMAIL
	</select>
	
	<!-- PM, PL 권한 가져오기 -->
	<select id="selectLV" parameterType="project_memVo" resultType="project_memVo">
		SELECT * FROM PROJECT_MEM 
		WHERE 
			USER_EMAIL = #{user_email} 
		AND 
			PRJ_ID = #{prj_id}
	</select>
	
	<!-- 개인보관함 -->
	<!-- 해당 프로젝트 해당 업무 file, link data에 대한 pagination  -->
	<select id="workFilePagination" parameterType="map" resultType="file_attchVo">
	  <![CDATA[
		  select rn, a.file_id, a.prj_id, a.user_email, a.wrk_id, a.original_file_nm, a.db_file_nm, a.file_size, a.file_exts, a.file_dt, a.del_fl, a.FILE_SAVE_FL, b.wrk_nm, C.USER_NM
	      from
	      (select a.*, ROW_NUMBER() OVER(order by a.file_id desc) rn
	      from
	      (select * 
	      from file_attch
	      WHERE wrk_id = #{wrk_id}
	      and del_fl='N'
	      and FILE_SAVE_FL = 'Y'
	      order by file_id desc) a)a, work b, USERS C
	      where rn>=(#{page}-1)*#{pageSize} + 1 and rn <=#{page}*#{pageSize}
	      and b.wrk_id = a.wrk_id
	      AND A.USER_EMAIL = C.USER_EMAIL
	      order by a.file_id desc
      ]]>
	</select>
	
	<select id="workFileCnt" parameterType="int" resultType="int">
		  select count(*)
	      from file_attch
	      WHERE wrk_id = #{wrk_id}
	      and del_fl='N'
	</select>
	
	<select id="workLinkPagination" parameterType="map" resultType="link_attchVo">
	  <![CDATA[
	  	select rn, a.link_id, a.prj_id, a.user_email, a.wrk_id, a.attch_url, a.file_link_dt, a.del_fl, b.wrk_nm, c.user_nm
	      from
	      (select a.*, ROW_NUMBER() OVER(order by a.link_id desc) rn
	      from
	      (select * 
	      from link_attch
	      WHERE wrk_id = #{wrk_id}
	      and del_fl = 'N'
	      order by link_id desc) a)a, work b, USERS c
	      where rn>=(#{page}-1)*#{pageSize} + 1 and rn <=#{page}*#{pageSize}
	      and b.wrk_id = a.wrk_id
	      and a.user_email = c.user_email
	      order by a.link_id desc
      ]]>
	</select>
	
	<select id="workLinkCnt" parameterType="int" resultType="int">
		  select count(*)
	      from link_attch
	      WHERE wrk_id = #{wrk_id}
	      and del_fl = 'N'
	</select>
	
	<!-- InsertFPagination파일수 조회 -->
	<select id="fCnt" resultType="int">
		select count(*)
		from
		file_attch
		where
		wrk_id = #{wrk_id}
		and
		del_fl='N'
	</select>

	<!-- *********************link_attch********************* -->
	<insert id="insertLink" parameterType="link_attchVo">
		insert into LINK_ATTCH
		values(
		LINK_SEQ.nextVal,
		#{prj_id},
		#{user_email},
		#{wrk_id},
		#{attch_url},
		sysdate,
		'N'
		)
	</insert>

	<select id="getLink" parameterType="int"
		resultType="link_attchVo">
		select * from Link_ATTCH
		where LINK_ID = #{link_id}
	</select>

	<!-- 해당 프로젝트의 linkList 받아오는 쿼리문 -->
	<select id="linkList" parameterType="int"
		resultType="link_attchVo">
		select a.LINK_ID, a.PRJ_ID, a.USER_EMAIL, a.WRK_ID, a.ATTCH_URL,
		a.FILE_LINK_DT, a.DEL_FL, b.wrk_nm
		from
		link_attch a, work b
		where
		a.prj_id = #{prj_id}
		and
		a.del_fl ='N'
		and a.wrk_id = b.wrk_id
	</select>

	<!-- insert 파일수 조회 -->
	<select id="lCnt" resultType="int">
		select count(*)
		from
		link_attch
		where
		wrk_id=#{wrk_id}
		and
		del_fl='N'
	</select>
	
	<!-- 다운로드 이용 내역 -->
	
	<insert id="insertHistory" parameterType="file_dw_hisVo">
		insert into 
			FILE_DW_HIS 
		values(
			FILE_DW_SEQ.nextVal,
			#{prj_id},
			#{user_email},
			#{file_id},
			sysdate
			)
	</insert>
	
	<select id="historyPagination" parameterType="map" resultType="file_dw_hisVo">
	 <![CDATA[
	 	select rn, a.DOWN_ID, a.PRJ_ID, a.USER_EMAIL, a.FILE_ID, a.DOWN_DATE, b.wrk_nm, c.ORIGINAL_FILE_NM, d.user_nm
		from
		(select a.*, ROW_NUMBER() OVER(order by a.down_id desc) rn
		from
		(select * from FILE_DW_HIS
		where prj_id = #{prj_id}
		order by down_id desc) a)a, work b, FILE_ATTCH c, users d
        where rn >=(#{page}-1)*#{pageSize}+1 and rn <= #{page}*#{pageSize}
		and a.file_id = c.file_id
		and b.wrk_id = c.wrk_id
        and a.user_email=d.user_email
        order by a.down_id desc
	]]>
	</select>
	
	<select id="historyCnt" parameterType="int" resultType="int">
		select count(*)
		from
			FILE_DW_HIS
		where
			prj_id = #{prj_id}
	</select>	

	<!-- *********************minutes************************ -->
	<select id="minutesList" parameterType="int" resultType="minutesVo">
		select A.*, B.user_nm from minutes A, users B
		where prj_id=#{prj_id}
		and A.user_email = B.user_email
		order by A.prj_id asc
	</select>

	<select id="minutesPagination" parameterType="map" resultType="minutesVo">
		<![CDATA[
		select rn, a.mnu_id, a.prj_id, a.user_email, a.subject, a.special, a.write_date, a.del_fl, a.user_nm 
		from
		(select a.*, ROW_NUMBER() OVER(order by A.mnu_id desc) rn
		from
		(select A.*, B.user_nm from minutes A, users B
		where prj_id = #{prj_id}
		and A.user_email = B.user_email
		and A.del_fl ='N') a)a
		where rn >=(#{page}-1)*#{pageSize}+1 and rn <= #{page}*#{pageSize}
        order by A.mnu_id desc
	 	]]>
	</select>
	
	<select id="minutesCnt" parameterType="int" resultType="int">
	 select count(*)
		from
		minutes
		where
		prj_id =#{prj_id}
		and
		del_fl='N'
	</select>
	
	<select id="minutesDetail" parameterType="int" resultType="minutesVo">
		select A.*, B.user_nm from minutes A, users B
		where mnu_id=#{mnu_id}
		and A.user_email = B.user_email
		and A.del_fl = 'N'
	</select>
	
	<!-- 검색 -->
	<select id="searchPagination" parameterType="map" resultType="minutesVo">
		<![CDATA[
		select rn, a.mnu_id, a.prj_id, a.user_email, a.subject, a.special, a.write_date, a.del_fl, a.user_nm 
	    from
	    (select a.*, ROW_NUMBER() OVER(order by A.prj_id desc) rn
	    from
	    (select A.*, B.user_nm from minutes A, users B
	    where B.user_nm like '%'||#{user_nm}||'%'
	    and A.prj_id= #{prj_id}
	    and A.del_fl ='N'
	    and A.user_email = B.user_email) a)a
	    where rn >=(#{page}-1)*#{pageSize}+1 and rn <= #{page}*#{pageSize}
	    order by A.prj_id desc
	    ]]>
	</select>
	
	<select id="searchCnt" parameterType="String" resultType="int">
		select count(*)
		from  
	    (select A.*, B.user_nm from minutes A, users B
	    where B.user_nm like '%'||#{user_nm}||'%'
	    and A.del_fl ='N'
	    and A.user_email = B.user_email)
	</select>
	
	<select id="attenderList" parameterType="int" resultType="minutes_memVo">
		select A.*, B.user_nm from MINUTES_MEM A, users B
		where mnu_id = #{mnu_id}
        and A.user_email=B.user_email
	</select>
	
	<update id="upMinutes" parameterType="int">
		update minutes set
			del_fl = 'Y'
		where
			mnu_id = #{mnu_id}
	</update>
	
	<select id="memberList" parameterType="String" resultType="userVo">
       SELECT DISTINCT B.USER_EMAIL
              , C.USER_NM FROM
              ( SELECT * FROM PROJECT_MEM WHERE USER_EMAIL = #{USER_EMAIL}) A, PROJECT_MEM B, USERS C
                WHERE B.PRJ_ID IN (A.PRJ_ID)
                AND C.USER_EMAIL = B.USER_EMAIL
   	</select>
   	
	<select id="recentMinutes" resultType="minutesVo">
       select* from 
	   (select * from
	   minutes
	   order by mnu_id desc)
	   where rownum = 1
   	</select>
	
	<!--참석자 멤버 등록 -->
	<insert id="insertAttender" parameterType="minutes_memVo">
		insert into MINUTES_MEM values(MNU_MEM_SEQ.nextVal, #{mnu_id},#{user_email})
	</insert>
	
	
	<!-- 나중에  email값주고 이름만 받아오는 쿼리로 바꿔야함!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
	<select id="whoAreYou" parameterType="String" resultType="userVo">
		select 
			user_nm, user_email
		from 
			users
	    where 
	    	user_email = #{user_email}
	</select>
	
	<insert id="insertMinutes" parameterType="minutesVo">
		insert into minutes 
		values(MNU_SEQ.nextVal,#{prj_id},#{user_email},#{subject},#{special},sysdate,'N')
	</insert>
	
	<update id="updateMinutes" parameterType="minutesVo" >
		update minutes 
			set 
			    subject=#{subject},
			    special=#{special}
			where
    			mnu_id=#{mnu_id}
	</update>
	
	<!-- *********************meeting************************ -->
	
	<insert id="insertMeeting" parameterType="MeetingVo">
		INSERT INTO MEETING
			(
				MT_ID
				,USER_EMAIL
				,PRJ_ID
				,MT_LC
				,MT_EXP
				,MT_DATE
				,MT_LAT
				,MT_LNG
			)
		VALUES
			(
				MT_SEQ.NEXTVAL
				,#{user_email}
				,#{prj_id}
				,#{mt_lc}
				,#{mt_exp}
				,#{mt_date}
				,#{mt_lat}
				,#{mt_lng}
			)
	</insert>
	<delete id="deleteMeeting" parameterType="String">
		DELETE FROM MEETING
		WHERE		MT_ID = #{mt_id}
	</delete>
	<select id="meetingList" resultType="MeetingVo">
		SELECT	*
		FROM 	MEETING WHERE PRJ_ID = #{prj_id}
		ORDER 	BY MT_DATE
	</select>
</mapper>